PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX sn: <http://www.ldbc.eu/ldbc_socialnet/1.0/data/>
PREFIX snvoc: <http://www.ldbc.eu/ldbc_socialnet/1.0/vocabulary/>
PREFIX sntag: <http://www.ldbc.eu/ldbc_socialnet/1.0/tag/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbpedia: <http://dbpedia.org/resource/>
PREFIX dbpedia-owl: <http://dbpedia.org/ontology/>

SELECT ?personId ?score (SUM(?friendInterestScore) AS ?friendsScore)
WHERE
{
    {
        SELECT ?personId ((COUNT(?message) + MAX(?interestScore))  AS ?score)
        WHERE
        {
            BIND ($tag as ?tagName)
            VALUES (?type) {(snvoc:Comment) (snvoc:Post)}
            ?tag foaf:name ?tagName .
            ?personId a snvoc:Person .
            BIND( IF(EXISTS { ?personId snvoc:hasInterest ?tag}, 100, 0) AS ?interestScore)
            {
                ?message a ?type .
                ?message snvoc:hasCreator ?personId .
                ?message snvoc:hasTag ?tag .
                ?message snvoc:creationDate ?creationDate .
                FILTER (?creationDate < $date) .
            }
            UNION
            {
                ?personId snvoc:hasInterest ?tag
            }
        }
        GROUP BY ?personId
    }
    {
        SELECT ?friend ((COUNT(?message) + MAX(?interestScore)) AS ?friendInterestScore)
        WHERE
        {
            BIND ($tag as ?tagName)
            VALUES (?type) {(snvoc:Comment) (snvoc:Post)}
            ?tag foaf:name ?tagName .
            ?friend a snvoc:Person .
            BIND( IF(EXISTS { ?friend snvoc:hasInterest ?tag}, 100, 0) AS ?interestScore)
            {
                ?message a ?type .
                ?message snvoc:hasCreator ?friend .
                ?message snvoc:hasTag ?tag .
                ?message snvoc:creationDate ?creationDate .
                FILTER (?creationDate < $date) .
            }
            UNION
            {
                ?friend snvoc:hasInterest ?tag
            }
        }
        GROUP BY ?friend
    }
    {
        ?friend snvoc:knows/snvoc:hasPerson ?personId
    }
    UNION
    {
        ?personId snvoc:knows/snvoc:hasPerson ?friend
    }
}
GROUP BY ?personId ?score
ORDER BY DESC(?score + ?friendsScore) ?personId
LIMIT 100
